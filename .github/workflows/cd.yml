name: CD

on:
  schedule:
  - cron: '32 1 * * *'
  workflow_dispatch:
  release:
    types: [published]

env:
  KEYCHAIN: /Users/runner/build.keychain-db
  KEYCHAIN_PASSWORD: mysecretpassword
  KEYCHAIN_PROFILE: build-profile
  SSH_KEY: /tmp/id_rsa
  APPLE_STORE_AUTH_KEY_PATH: /tmp/authkey.p8
  APPLE_AUTH_PARAMS: "-authenticationKeyPath /tmp/authkey.p8 -authenticationKeyID ${{ secrets.APPLE_STORE_AUTH_KEY_ID }} -authenticationKeyIssuerID ${{ secrets.APPLE_STORE_AUTH_KEY_ISSUER_ID }}"
  # conditionally updated later:
  EXPORT_METHOD: "app-store"
  EXTRA_XCODEBUILD: ""
  UPLOAD_TO: ""
  VERSION: ""
  SIGNING_CERTIFICATE: ""
  SIGNING_CERTIFICATE_P12_PASSWORD: ""
  
jobs:
  build_and_deploy:
    strategy:
      fail-fast: false
      matrix:
        platform: [iOS, macOS]
        uploadto: [app-store, ftp]
    runs-on: macos-13

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set iOS extra xcode params
      if: matrix.platform == 'iOS'
      run: echo "EXTRA_XCODEBUILD=-sdk iphoneos ${{ env.APPLE_AUTH_PARAMS }}" >> $GITHUB_ENV

    - name: Set macOS FTP export method
      if: matrix.platform == 'macOS' && matrix.uploadto == 'ftp'
      run: echo "EXPORT_METHOD=developer-id" >> $GITHUB_ENV

    - name: Decide whether building nightly or release
      env:
        UPLOAD_TO: ${{ matrix.uploadto }}
      shell: python
      run: |
        import datetime
        import os

        upload_to = os.getenv("UPLOAD_TO")

        if os.getenv("GITHUB_EVENT_NAME", "") == "release":
          version = os.getenv("GITHUB_REF_NAME")
          upload_folder = f"release/{version}"
        else:
          version = str(datetime.date.today())
          upload_folder = f"nightly/{version}"
          if upload_to == "app-store":
            upload_to = "" # do not upload in this case

        with open(os.getenv("GITHUB_ENV"), "a") as fh:
          fh.write(f"VERSION={version}\n")
          fh.write(f"UPLOAD_FOLDER={upload_folder}\n")
          fh.write(f"UPLOAD_TO={upload_to}\n")

    - name: Use Developer ID Certificate
      if: env.UPLOAD_TO == 'ftp' && matrix.platform == 'macOS'
      run: |
        echo "SIGNING_CERTIFICATE=${{ secrets.APPLE_DEVELOPER_ID_SIGNING_CERTIFICATE }}" >> $GITHUB_ENV
        echo "SIGNING_CERTIFICATE_P12_PASSWORD=${{ secrets.APPLE_DEVELOPER_ID_SIGNING_P12_PASSWORD }}" >> $GITHUB_ENV
        echo "SIGNING_IDENTITY=${{ secrets.APPLE_DEVELOPER_ID_SIGNING_IDENTITY }}" >> $GITHUB_ENV

    - name: Use Apple Development Certificate
      if: env.UPLOAD_TO == 'ftp' && matrix.platform == 'iOS'
      run: |
        echo "SIGNING_CERTIFICATE=${{ secrets.APPLE_DEVELOPMENT_SIGNING_CERTIFICATE }}" >> $GITHUB_ENV
        echo "SIGNING_CERTIFICATE_P12_PASSWORD=${{ secrets.APPLE_DEVELOPMENT_SIGNING_P12_PASSWORD }}" >> $GITHUB_ENV
        echo "SIGNING_IDENTITY=${{ secrets.APPLE_DEVELOPMENT_SIGNING_IDENTITY }}" >> $GITHUB_ENV

    - name: Use Apple Distribution Certificate
      if: env.UPLOAD_TO == 'app-store'
      run: |
        echo "SIGNING_CERTIFICATE=${{ secrets.APPLE_DISTRIBUTION_SIGNING_CERTIFICATE }}" >> $GITHUB_ENV
        echo "SIGNING_CERTIFICATE_P12_PASSWORD=${{ secrets.APPLE_DISTRIBUTION_SIGNING_P12_PASSWORD }}" >> $GITHUB_ENV
        echo "SIGNING_IDENTITY=${{ secrets.APPLE_DEVELOPMENT_SIGNING_IDENTITY }}" >> $GITHUB_ENV

    - name: Decode Apple Store Key
      if: env.UPLOAD_TO != ''
      run: echo "${{ secrets.APPLE_STORE_AUTH_KEY }}" | base64 --decode -o ${{ env.APPLE_STORE_AUTH_KEY_PATH }}

    - name: Build xcarchive
      uses: ./.github/actions/xcbuild
      if: env.UPLOAD_TO != ''
      with:
        action: archive
        xc-destination: generic/platform=${{ matrix.platform }}
        version: ${{ env.VERSION }}
        APPLE_DEVELOPMENT_SIGNING_CERTIFICATE: ${{ secrets.APPLE_DEVELOPMENT_SIGNING_CERTIFICATE }}
        APPLE_DEVELOPMENT_SIGNING_P12_PASSWORD: ${{ secrets.APPLE_DEVELOPMENT_SIGNING_P12_PASSWORD }}
        DEPLOYMENT_SIGNING_CERTIFICATE: ${{ env.SIGNING_CERTIFICATE }}
        DEPLOYMENT_SIGNING_CERTIFICATE_P12_PASSWORD: ${{ env.SIGNING_CERTIFICATE_P12_PASSWORD }}
        KEYCHAIN: ${{ env.KEYCHAIN }}
        KEYCHAIN_PASSWORD: ${{ env.KEYCHAIN_PASSWORD }}
        KEYCHAIN_PROFILE: ${{ env.KEYCHAIN_PROFILE }}
        EXTRA_XCODEBUILD: ${{ env.EXTRA_XCODEBUILD }}

    - name: Add altool credentials to Keychain
      if: matrix.platform == 'macOS' && env.UPLOAD_TO == 'ftp'
      env:
        APPLE_SIGNING_ALTOOL_USERNAME: ${{ secrets.APPLE_SIGNING_ALTOOL_USERNAME }}
        APPLE_SIGNING_ALTOOL_PASSWORD: ${{ secrets.APPLE_SIGNING_ALTOOL_PASSWORD }}
        APPLE_SIGNING_TEAM: ${{ secrets.APPLE_SIGNING_TEAM }}
      run: |
        security find-identity -v $KEYCHAIN
        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN
        xcrun notarytool store-credentials \
            --apple-id "${APPLE_SIGNING_ALTOOL_USERNAME}" \
            --password "${APPLE_SIGNING_ALTOOL_PASSWORD}" \
            --team-id "${APPLE_SIGNING_TEAM}" \
            --validate \
            --keychain $KEYCHAIN \
            $KEYCHAIN_PROFILE

    - name: Prepare export for IPA
      if: matrix.platform == 'iOS' && env.UPLOAD_TO == 'ftp'
      run: |
        plutil -create xml1 ./export.plist
        plutil -insert method -string ad-hoc ./export.plist
        plutil -insert provisioningProfiles -dictionary ./export.plist
        plutil -replace provisioningProfiles -json '{ "self.Kiwix" : "iOS Team Provisioning Profile" }' ./export.plist

    - name: Prepare export for ${{ matrix.uploadto }}
      if: matrix.platform != 'iOS' || env.UPLOAD_TO == 'app-store'
      run: |
        plutil -create xml1 ./export.plist
        plutil -insert destination -string upload ./export.plist
        plutil -insert method -string $EXPORT_METHOD ./export.plist

    - name: Upload Archive to Apple (App Store or Notarization)
      if: env.UPLOAD_TO == 'app-store'
      run: python .github/retry-if-retcode.py --sleep 60 --attempts 5 --retcode 70 xcrun xcodebuild -exportArchive -archivePath $PWD/Kiwix-$VERSION.xcarchive -exportPath $PWD/export/ -exportOptionsPlist export.plist -allowProvisioningUpdates $APPLE_AUTH_PARAMS

    - name: Export notarized App from archive, Create DMG, Notarize DMG
      if: matrix.platform == 'macOS' && env.UPLOAD_TO == 'ftp'
      run: |
        python .github/retry-if-retcode.py --sleep 60 --attempts 20 --retcode 65 xcrun xcodebuild -exportNotarizedApp -archivePath $PWD/Kiwix-$VERSION.xcarchive -exportPath $PWD/export/ -allowProvisioningUpdates $APPLE_AUTH_PARAMS
        pip install dmgbuild
        dmgbuild -s .github/dmg-settings.py -Dapp=$PWD/export/Kiwix.app -Dbg=.github/dmg-bg.png "Kiwix-$VERSION" $PWD/kiwix-$VERSION.dmg
        xcrun notarytool submit --keychain $KEYCHAIN --keychain-profile $KEYCHAIN_PROFILE --wait $PWD/kiwix-$VERSION.dmg
        xcrun stapler staple $PWD/kiwix-$VERSION.dmg

    - name: Add SSH_KEY to filesystem
      if: env.UPLOAD_TO == 'ftp'
      run: |
        echo "${{ secrets.SSH_KEY }}" > $SSH_KEY
        chmod 600 $SSH_KEY

    - name: Upload DMG
      if: env.UPLOAD_TO == 'ftp' && matrix.platform == 'macOS'
      run: python .github/upload_file.py --src ${PWD}/kiwix-${VERSION}.dmg --dest ci@master.download.kiwix.org:30022/data/download/${UPLOAD_FOLDER} --ssh-key ${SSH_KEY}

    - name: Upload IPA
      if: env.UPLOAD_TO == 'ftp' && matrix.platform == 'iOS'
      run: |
        mv ${PWD}/export/Kiwix.ipa ${PWD}/export/kiwix-${VERSION}.ipa
        python .github/upload_file.py --src ${PWD}/export/kiwix-${VERSION}.ipa --dest ci@master.download.kiwix.org:30022/data/download/${UPLOAD_FOLDER} --ssh-key ${SSH_KEY}
